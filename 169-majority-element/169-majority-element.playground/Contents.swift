/**
 给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。
 
 你可以假设数组是非空的，并且给定的数组总是存在众数。
 
 示例 1: 
 输入: [3,2,3]
 输出: 3
 
 示例 2:
 输入: [2,2,1,1,1,2,2]
 输出: 2
 
 思路：第一直觉是用哈希表，时间和空间复杂度都是 O(n)，然而这道题有一个更好的算法，称之为：
 
 Boyer-Moore 投票算法
 
 基本原理是：如果把众数记为 +1 ，把其他数记为 −1 ，将它们全部加起来，显然和大于 0 ，从结果可以看出众数比其他数多。
 
 因此，可以维护一个计数器，把第一个数字作为候选众数，遍历，如果下一位遇到一个我们目前的候选众数，就将计数器加一，否则减一。
 
 只要计数器等于 0 ，我们就将 nums 中之前访问的数字全部忘记 ，并把下一个数字当做候选的众数
  
 例如：
 
 1,2,1,2,1,2,1,2,1,2,1,2,1
 | | | | | | | | | | | | |
 1 0 1 0 1 0 1 0 1 0 1 0 1 
 
 3,2,3
 | | |
 1 0 1
 
 2,2,1,1,1,2,2,
 | | | | | | | 
 1 2 1 0 1 0 1 
 
 时间复杂度：O(n)
 空间复杂度：O(1)
 */

class Solution {
    func majorityElement(_ nums: [Int]) -> Int {
        var candidate: Int?
        var count = 0
        for num in nums {
            if count == 0 {
                candidate = num
            }
            count += (num == candidate) ? 1 : -1
        }
        return candidate ?? 0
    }
}
