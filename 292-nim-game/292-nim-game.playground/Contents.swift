/**
链接: https://leetcode-cn.com/problems/nim-game/submissions/

给定一个整数，编写一个函数来判断它是否是 2 的幂次方。

示例 1:
输入: 1
输出: true
解释: 20 = 1

示例 2:
你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。
你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。

示例:
输入: 4
输出: false
解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；
因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。


思路：数学归纳法

对于4而言，谁面对4谁就输了，因为不管你拿1,2,3个剩下的都会被一次拿完。
而对于2* 4=8个，面对8的时候不管拿x(1,2,3)个，另一个人都可以4-x个使得剩下的为4个也就是输了（所以n=8时成立）。
以此类推 3* 4=12个，4* 4=16个...

所以数学归纳法成立，遇到4的倍数的人就输了。

时间复杂度: O(1)
空间复杂度: O(1)
*/

class Solution {
    func canWinNim(_ n: Int) -> Bool {
        return n % 4 != 0
    }
}


