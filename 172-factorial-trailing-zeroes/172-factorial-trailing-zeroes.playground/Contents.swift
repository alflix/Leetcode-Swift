/**
给定一个整数 n，返回 n! 结果尾数中零的数量。

示例 1:

输入: 3
输出: 0
解释: 3! = 6, 尾数中没有零。
示例 2:

输入: 5
输出: 1
解释: 5! = 120, 尾数中有 1 个零.
说明: 你算法的时间复杂度应为 O(log n) 。

思路：题目问阶乘的结果有几个零，如果用笨方法求出阶乘然后再算 0 的个数会超出时间限制。

然后我们观察一下，5 的阶乘结果是 120，零的个数为 1：

5! = 5 * 4 * 3 * 2 * 1 = 120
末尾唯一的零来自于 2 * 5。很显然，如果需要产生零，阶乘中的数需要包含 2 和 5 这两个因子。

例如：4 * 10 = 40 也会产生零，因为 4 * 10 = ( 2 * 2 ) * ( 2 * 5) 。

因此，我们只要数一数组成阶乘的数中共有多少对 2 和 5 的组合即可。又因为 5 的个数一定比 2 少，问题简化为计算 5 的个数就可以了。
  
时间复杂度：O(log n)
空间复杂度：O(1)
 */

import Foundation

class Solution {
    func trailingZeroes(_ n: Int) -> Int {
        var num = n
        var res = 0
        while num >= 5 {
            res += num/5
            num /= 5
        }        
        return res
    }
}
